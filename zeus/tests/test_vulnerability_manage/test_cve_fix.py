#!/usr/bin/python3
# ******************************************************************************
# Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
# licensed under the Mulan PSL v2.
# You can use this software according to the terms and conditions of the Mulan PSL v2.
# You may obtain a copy of Mulan PSL v2 at:
#     http://license.coscl.org.cn/MulanPSL2
# THIS SOFTWARE IS PROVIDED ON AN 'AS IS' BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR
# PURPOSE.
# See the Mulan PSL v2 for more details.
# ******************************************************************************/
import json
import unittest
from unittest import mock

from flask import Flask

from vulcanus.conf.constant import EXECUTE_CVE_FIX
from vulcanus.multi_thread_handler import MultiThreadHandler
from vulcanus.restful.status import (
    DATABASE_CONNECT_ERROR,
    DATABASE_QUERY_ERROR,
    PARAM_ERROR,
    SERVER_ERROR, SUCCEED,
    TOKEN_ERROR
)
from zeus import BLUE_POINT
from zeus.account_manager.cache import UserCache, UserInfo
from zeus.vulnerability_manage.view import ExecuteCveFixTask

app = Flask("test")
for blue, api in BLUE_POINT:
    api.init_app(blue)
    app.register_blueprint(blue)

app.testing = True
client = app.test_client()


class TestCveFix(unittest.TestCase):
    HEADERS = {
        "Content-Type": "application/json; charset=UTF-8"
    }
    HEADERS_WITH_TOKEN = {
        "Content-Type": "application/json; charset=UTF-8",
        "access_token": "mock_token"
    }

    MOCK_HOST_INFO = {
        "mock_id_1": {
            "name": "host_name_1",
            "ip": "host_ip_1",
            "address": "host_ip_1:host_port"
        },
        "mock_id_2": {
            "name": "host_name_2",
            "ip": "host_ip_2",
            "address": "host_ip_2:host_port"
        }
    }

    def setUp(self) -> None:
        self.MOCK_ARGS = {
            "task_id": "mock_task_id",
            "task_name": "mock_task_name",
            "task_type": "mock_task_type",
            "total_hosts": ["mock_id_1", "mock_id_2", "mock_id_3"],
            "check_items": [],
            "tasks": [
                {
                    "host_id": "mock_id_1",
                    "check": False,
                    "cves": ["mock_cve_id"]
                },
                {
                    "host_id": "mock_id_2",
                    "check": False,
                    "cves": ["mock_cve_id"]
                },
                {
                    "host_id": "mock_id_3",
                    "check": False,
                    "cves": ["mock_cve_id"]
                }
            ],
            "callback": "mock_callback",
        }

    @mock.patch.object(ExecuteCveFixTask, '_callback')
    @mock.patch.object(MultiThreadHandler, "get_result")
    @mock.patch.object(MultiThreadHandler, "create_thread")
    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(UserCache, 'get')
    def test_cve_fix_should_return_execute_result_when_all_is_right(self,
                                                                    mock_user,
                                                                    mock_query_host_info,
                                                                    mock_create_thread,
                                                                    mock_get_result,
                                                                    mock_callback):
        mock_user.return_value = UserInfo('admin', 'mock', 'mock')
        mock_query_host_info.return_value = SUCCEED, self.MOCK_HOST_INFO
        mock_create_thread.return_value = None
        mock_callback.return_value = None
        mock_get_result.return_value = [
            {
                "code": SUCCEED,
                "msg": "operate success",
                "result": [
                    {
                        "cve_id": "mock_cve_id",
                        "log": "fix succeed",
                        "result": "fixed"
                    }
                ],
                "host_id": "mock_id_1",
                "task_id": "mock_task_id",
                "host_name": "host_name_1",
                "host_ip": "host_ip_1",
                "callback": "mock_callback",
                "headers_apollo": {}
            },
            {
                "code": SERVER_ERROR,
                "msg": "host connection error",
                "result": [],
                "host_id": "mock_id_2",
                "task_id": "mock_task_id",
                "host_name": "host_name_2",
                "host_ip": "host_ip_2",
                "callback": "mock_callback",
                "headers_apollo": {}
            }
        ]
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS_WITH_TOKEN)

        expect_result = {
            "code": SUCCEED,
            "msg": "operation succeed",
            "result": {
                "task_id": "mock_task_id",
                "task_name": "mock_task_name",
                "task_result": [
                    {
                        "check_items": [],
                        "cves": [
                            {
                                "cve_id": "mock_cve_id",
                                "log": "fix succeed",
                                "result": "fixed"
                            }
                        ],
                        "host_id": "mock_id_1",
                        "host_ip": "host_ip_1",
                        "host_name": "host_name_1",
                        "log": "operate success",
                        "status": "succeed"
                    },
                    {
                        "check_items": [],
                        "cves": [],
                        "host_id": "mock_id_2",
                        "host_ip": "host_ip_2",
                        "host_name": "host_name_2",
                        "log": "host connection error",
                        "status": "fail"
                    },
                    {
                        "check_items": [],
                        "cves": [],
                        "host_id": "mock_id_3",
                        "host_ip": "",
                        "host_name": "",
                        "log": "No matching data found in the database.",
                        "status": "unknown"
                    },
                ]
            }
        }
        self.assertEqual(expect_result, response.json)

    def test_cve_fix_should_return_token_error_when_request_without_token(self):
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS)
        self.assertEqual(TOKEN_ERROR, response.json.get('code'))

    def test_cve_fix_should_return_param_error_when_request_with_incorrect_args(self):
        self.MOCK_ARGS.update({"callback": []})
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(PARAM_ERROR, response.json.get('code'))

    def test_cve_fix_should_return_400_when_request_without_args(self):
        response = client.post(EXECUTE_CVE_FIX, headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(400, response.status_code)

    def test_cve_fix_should_return_405_when_request_method_is_not_post(self):
        response = client.get(EXECUTE_CVE_FIX,
                              data=json.dumps(self.MOCK_ARGS),
                              headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(405, response.status_code)

    @mock.patch.object(UserCache, 'get')
    def test_cve_fix_should_return_token_error_when_access_token_is_incorrect(self, mock_user):
        mock_user.return_value = None
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(TOKEN_ERROR, response.json.get('code'))

    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(UserCache, 'get')
    def test_cve_fix_should_return_database_connect_error_when_cannot_connect_database(
            self, mock_user, mock_query_host_info):
        mock_user.return_value = UserInfo('admin', 'mock', 'mock')
        mock_query_host_info.return_value = DATABASE_CONNECT_ERROR, {}
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(DATABASE_CONNECT_ERROR, response.json.get('code'))

    @mock.patch('zeus.vulnerability_manage.view.query_host_basic_info')
    @mock.patch.object(UserCache, 'get')
    def test_cve_fix_should_return_database_query_error_when_query_data_is_error(
            self, mock_user, mock_query_host_info):
        mock_user.return_value = UserInfo('admin', 'mock', 'mock')
        mock_query_host_info.return_value = DATABASE_QUERY_ERROR, {}
        response = client.post(EXECUTE_CVE_FIX,
                               data=json.dumps(self.MOCK_ARGS),
                               headers=self.HEADERS_WITH_TOKEN)
        self.assertEqual(DATABASE_QUERY_ERROR, response.json.get('code'))